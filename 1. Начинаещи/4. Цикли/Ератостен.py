# задачи чрез решето на Ератостен
# намиране на простите числа в някакъв интервал [a,b]
a=int(input('въведете долна граница на интервала: '))
b=int(input('въведете горна граница на интервала: '))
X=list(range(a,b+1)) # списък от числата
Y=[True]*len(X)
# Y е списък с флаговете за всяко число от X:
# True означава, че числото е просто
# False означава, че числото не е просто
# В началото приемаме, че всики числа са прости, и постепенно променяме флага
for i in range(len(X)-1):
    if Y[i]:
        for j in range(i+1,len(X)):
            if X[j]%X[i]==0:
                Y[j]=False
d=dict(zip(X,Y))
d_simple = [k for (k,v) in d.items() if v==True]
print(d_simple)
print(len(d_simple))

# НОД на x и y
import random as rd
x=rd.randint(1,101)
y=rd.randint(1,101)
print(x,y)
x_del=set([i for i in range(1,x+1) if x%i==0])
print(x_del)
y_del=set([i for i in range(1,y+1) if y%i==0])
print(y_del)
NOD=max(x_del & y_del)
print(NOD)

# НОД по алгоритъм на Евклид чрез изваждане:
while (x!=y):
    if (x>y): x=x-y
    else: y=y-x
NOD=x
print(NOD)

# Ако е дадена една редица, за която е известно, че всеки следващ член се образува
# по формулата: an= {1**n, за n%3==0 и n%2==0;
#                    1**(-n), за n%3!=0 и n%2!=0;
#                    n//3, n%3==0 и n%2!=0;
#                    n//2, n%3!=0 и n%2==0;
# да се изведат първите 10  n от редицата, за които поредните членове са равни на 1-ца
# да се изведат първите 10  n от редицата, за които поредният член е равен на n//2
# да се изведат първите 10  n от редицата, за които поредният член е равен на n//3
