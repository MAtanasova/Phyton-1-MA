# # Един триъгълник може да се опише чрез неговите три страни a,b,c.
# # Условие за a, b и c да образуват триъгълник: (a<b+c) & (b<a+c) & (c<a+b)
# Зад. 1: Да се генерира такъв списък от произволни тройки цели числа, които образуват триъгълник.
# [[1,2,3],[2,3,4],[3,4,5]...]
def zad1():
    import random as rd
    #n=int(input('Колко триъгълника ще генерираме? '))
    n=rd.randint(5,15) # задаваме произволен брой триъгълници, които да бъдат създадени, като числото е случайно в интервала [5;15]
    L=[] #празен списък от тройки числа, които образуват триъгълник
    k=0 #брояч колко пъти успешно сме добавили нов триъгълник
    while k<n:
        a=rd.randint(1,100)
        b=rd.randint(1,100)
        c=rd.randint(1,100)
        cond=(a<b+c) & (b<a+c) & (c<a+b) # или True или False
        if cond:
            L.append([a,b,c])
            k=k+1
    return(L)

# Зад. 2: Да се генерира списък от произволни тройки цели числа. Преформатирайте списъка на речник от тройките числа, така че:
# за ключ 'tringle True': стойността да бъде списък от тройките числа, които образуват триъгълник
# за ключ 'tringle False': стойността да бъде списък от тройките числа, които НЕ образуват триъгълник
# {'tringle True':[[...],[...],[...]], 'tringle False':[[...],[...],[...]]}

import random as rd
n=rd.randint(5,15) # всички произволни тройки числа
L_True=[] #тези, които образуват триъгълник
L_False=[] #тези, които не образуват триъгълник
D={}
for i in range(n):
    a=rd.randint(1,35)
    b=rd.randint(1,35)
    c=rd.randint(1,35)
    cond=(a<=b+c) & (b<=a+c) & (c<=a+b) # или True или False
    if cond:
        L_True.append([a,b,c])

    else:
        L_False.append([a, b, c])

D['tringle True']=L_True
D['tringle False']=L_False
print(D)

# Зад. 3: Като използвате списъка с тройките числа, които образуват триъгълници от речника, намерете и изведете:

# 1# кои двойки тригъгълници са подобни: a_1/а_2=b_1/b_2 или c_1/c_2=b_1/b_2 или a_1/а_2=c_1/c_2

# [[...],[...],[...],[...]...] - 4 триъгълника
# l=D['tringle True']
# podobni_tri=[]
# for i in l: # всяко едно i ще бъде списък от страните [a,b,c] => a=i[0], b=i[1], c=i[2]
#     for j in l:
#         if i!=j:
#             cond_1=round(i[0]/j[0],2)==round(i[1]/j[1],2)
#             # ако м=12.34564 => round(м,2)->12.35
#             cond_2 = round(i[2] / j[2], 2) == round(i[1] / j[1], 2)
#             cond_3 = round(i[0] / j[0], 2) == round(i[2] / j[2], 2)
#             cond=cond_1 | cond_2 | cond_3
#             if cond:
#                 podobni_tri.append([i,j])
# if len(podobni_tri)==0:
#     print("Няма генерирани подобни триъгълници.")
# else:
#     print("Двойките подобни триъгълници са:")
#     for i in podobni_tri:
#         print(i)

# 2# кои от триъгълниците са правоъгълни: c^2=a^2+b^2 или a^2=c^2+b^2 или b^2=a^2+c^2
# всяко едно i ще бъде списък от страните [a,b,c] => a=i[0], b=i[1], c=i[2]
# [a,b,c,T/F,T/F,T/F,T/F] ->l[i].append(cond)
# {l[i]:[T/F,T/F,T/F,T/F],...}
d={}
l=D['tringle True']
for i in l:
    # 2) кои от триъгълниците са правоъгълни
    cond_3_2_1 = i[0] ** 2 + i[1] ** 2 == i[2] ** 2
    cond_3_2_2 = i[0] ** 2 + i[2] ** 2 == i[1] ** 2
    cond_3_2_3 = i[1] ** 2 + i[2] ** 2 == i[0] ** 2
    cond_3_2=cond_3_2_1 | cond_3_2_2 | cond_3_2_3
    # 3) кои от триъгълниците са равнобедрени
    cond_3_3_1 = i[0] == i[2]
    cond_3_3_2 = i[0] == i[1]
    cond_3_3_3 = i[1] == i[0]
    cond_3_3 = cond_3_3_1 | cond_3_3_2 | cond_3_3_3
    # 4) кои от триъгълниците са равностранни
    cond_3_4_1 = i[0] == i[2]
    cond_3_4_2 = i[0] == i[1]
    cond_3_4 = cond_3_2_1 & cond_3_2_2
    # 5) кои от триъгълниците са с лице по-голямо 75
    #S=sqrt(p*(p-a)*(p-b)*(p-c)) #, където p е полупериметъра;
    # НЕ трябва да се прави проверка на подкоренната величина, защото всеки един триъгълник има лице
    a,b,c = i[0],i[1], i[2]
    p=round((a+b+c)/2,2)
    cond_3_5 = (p*(p-a)*(p-b)*(p-c))**(round(1/2,2))>75
    d[str(i)]=[cond_3_2,cond_3_3,cond_3_4,cond_3_5]
    #{l[i]:[T/F,T/F,T/F,T/F],...}
D['tringle True']=d
for k in D['tringle True'].items():
    # т.к. сме преформатирали стойността на D['tringle True'] да бъде речник със структура #{l[i]:[T/F,T/F,T/F,T/F],...}
    # затова, за даможем да извлечем и ключа и стойността използваме метода .items()
    print(k)
