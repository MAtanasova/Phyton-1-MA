import numpy as np
import random as rd

# Да се създаде квадратна матрица от единици или нули с произволен размер в интервала [2;10].
# 1) Ако индексът за колона и индексът за ред на дадена клетка от матрицата са едновременно четни,
# то стойността на клетката да се промени на числото две.
# 2) Ако r e iндекс на реда и c e индекс на колоната, то да се променят стойните на онези клетки,
# за които е изпълнена формулата: r=c+1. Новата стойност на клетката да бъде произволно число в интервала [2;100]
# Пример: A[0,0], r=0 и c=0 => няма да има промяна; A[1,0], r=1 и c=0, т.е. r=c+1 => A[1,0] ще приеме случайна стойност от 2 до 100
# В противен случай, клетката да бъде с цялата част от корен трети от произволно число в горния интервал, повдигнато на 5-та степен
# 3) запълнете клетките с произволни числа и променете стойностите на онези от тях, за които корен 3-ти от стойността е цяло число.
# Новата стойност да бъде нула.Пример: ако A[0,0]=27, корен 3-ти от 27 е 3, а 3 е цяло число=>A[0,0]=0
# Намерете разликата между сумите на матрицата преди и след прилагане на горното условие.

try:
    k=int(input('Матрица от нули или единици (0,1): '))
except:
    k=0
    print("Неправилно въвеждане. Системата ще създаде матрица от нули")
rows_cols=rd.randint(2,10)
shape=(rows_cols,rows_cols)
if k==0:
    A=np.zeros(shape=shape,dtype=int)
    S=0
else:
    A=np.ones(shape=shape,dtype=int)
    S=rows_cols**2
    # S=A.sum()
print("Оригиналната матрица има вида:\n")
print(A)
print("Сумата на матрицата преди модифициране е: %d" %(S))
def task_1():
    global A
    global rows_cols
    for r in range(rows_cols):
        if r%2==0:
            for c in range(rows_cols):
                if c%2==0:
                    A[r,c]=2
def task_2():
    global A
    global rows_cols
    for r in range(rows_cols):
        for c in range(rows_cols):
            if r==c+1:
                A[r,c]=-rd.randint(2,100)
            else:
                A[r, c] =int(rd.randint(2,100)**(5/3))
def task_3():
    global A
    global rows_cols
    for r in range(rows_cols):
        for c in range(rows_cols):
            A[r, c]=rd.randint(0,100)
            cond=(A[r,c])**(1/3)-int((A[r,c])**(1/3))==0
            if cond:A[r, c]=0
            # алтернативен запис:
            # rnd=rd.randint(-100,100)
            # if rnd**(1/3)-int(rnd**(1/3))==0:A[r, c]=0
            # else:A[r, c]=rnd

task_3()
print("Променената матрица има вида:\n")
print(A)
print("Разликата в сумите преди и след модифициране на клетките е: %d" %(S-A.sum()))
# корен 3-ти от х на 5-та: х**(5/3)
# корен 2-ри от х на 1-ва: х**(1/2)
# корен 2-ри от х: х**(1/2)
# корен 3-ти от х : х**(1/3)