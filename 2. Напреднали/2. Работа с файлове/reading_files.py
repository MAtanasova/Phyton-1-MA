import json
# Обработва обект (запис) само въз основа на атрибутите му
# Аналог на структурата "речник", защото има почти същия вид
# [{:}{:}...{:}] - като списък от речници
# {{:}{:}...{:}} - като множество от речници

import csv
# Обработва обект (запис) само въз основа на атрибутите му
# Най-много прилича на таблица със данни, като разнообразието на различните формати се дължи на:
# 1. знака за десетична точка: .,
# 2. знака, който служи за разделител на колоните: ,;
# Не е възможна ситуация, при която 1. и 2. са един и същи знак

import xml
# Обработва обект (запис) само въз основа на атрибутите му
# Наподобяват тези на json-a
# Изцяло уеб формат за структурирани данни
# Използва тагове от типа: <име на тага> стойност </име на тага>
# <име на тага> все едно ключ в речник или име на колона от таблица
# стойност е все едно стойносста за някакъв ключ или стойността на клеткатата от таблицата
# </име на тага> е затварящ компонент, който указва, че сме приключили с описанието на конкретната
#                харектеристика (ключ или коллона за определен запис или ред)

# един лош пример за xml:
# <tag_1>Заглавие: "Python for begginers"</tag_1>

# един добър пример за xml:
# <Заглавие>Python for begginers</Заглавие>


import pandas as pd
# Вижте упражнението за Pandas
# Обработва обект (запис) само въз основа на атрибутите му
# Moже да прочита и записва различни типове файлове, които съдържат структурирани данни
# .xls, .xlsx, .csv, .json
pthx='/Users/valerina/PycharmProjects/1386/PANDAS/'
fnx='invoice_2019_5.xls'
pthj="/Users/valerina/PycharmProjects/1386/Работа с JSON-20210517/"
fnj="not_a_simple_json.json"
dfj=pd.read_json(pthj+fnj)
dfx=pd.read_excel(pthx+fnx)
dfc=pd.read_csv(pthc+fnc)
dfp=pd.read_pickle(pthp+fnp)


# pd.read_sas()
# pd.read_stata()
# pd.read_sql()
# pd.read_sql_table()
# pd.read_sql_query()

import pickle
# Обработва обект (запис) въз основа на атрибутите и методите му
# Може да извлече както атрибутите, така и методите свързани с обработваните обекти